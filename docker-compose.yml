version: '3.7'
services:
  api-rest:
    container_name: delivery-api-rest
    build:
      context: .
      dockerfile: ./container/docker/Dockerfile
      target: production
    ports:
      - 8080:8080
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_URL: ${POSTGRES_URL}
      KAFKA_URL: ${KAFKA_URL}
      KAFKA_AUTOSTART: ${KAFKA_AUTOSTART}
    depends_on:
      - database
      - kafka
    networks:
      - ecommerce-network

  integration-test:
    container_name: integration-test
    build:
      context: .
      dockerfile: ./container/docker/Dockerfile
      target: integration-test
    ports:
      - 8080:8080
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_URL: ${POSTGRES_URL}
      KAFKA_URL: ${KAFKA_URL}
      KAFKA_AUTOSTART: ${KAFKA_AUTOSTART}
    depends_on:
      - database
      - kafka
    networks:
      - ecommerce-network
  kafka:
    container_name: ordering-queue
    image: 'bitnami/kafka:latest'
    hostname: suetham-workplace
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - 9092:9092
    networks:
      - ecommerce-network
  database:
    container_name: delivery-api-database
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - /usr/docker/postgresql/delivery-api/:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ecommerce-network
networks:
  ecommerce-network:
    external: true
